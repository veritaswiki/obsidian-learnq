/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => LingQPlugin
});
var import_obsidian = __toModule(require("obsidian"));

// src/services/lingq-api.ts
var LingQAPI = class {
  constructor(apiKey) {
    this.baseUrl = "https://www.lingq.com/api/v2";
    this.apiKey = apiKey;
  }
  async request(endpoint, options) {
    try {
      const response = await fetch(`${this.baseUrl}${endpoint}`, {
        ...options,
        headers: {
          "Authorization": `Token ${this.apiKey}`,
          "Content-Type": "application/json",
          ...options.headers
        }
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      return {
        success: true,
        data
      };
    } catch (error) {
      console.error("LingQ API error:", error);
      return {
        success: false,
        message: error instanceof Error ? error.message : "Unknown error occurred"
      };
    }
  }
  async createLesson(language, title, text) {
    return this.request(`/languages/${language}/lessons/`, {
      method: "POST",
      body: JSON.stringify({
        title,
        text,
        share_status: "private",
        source_url: "",
        original_url: ""
      })
    });
  }
  async getLanguages() {
    return this.request("/languages/", {
      method: "GET"
    });
  }
  async getUserInfo() {
    return this.request("/me/", {
      method: "GET"
    });
  }
  async validateApiKey() {
    const response = await this.getUserInfo();
    return response.success;
  }
};

// src/models/plugin-state.ts
var PluginStateManager = class {
  constructor(initialState = {}) {
    this.api = null;
    this.state = {
      isInitialized: false,
      apiKey: "",
      language: "en",
      ...initialState
    };
  }
  async initialize(apiKey, language) {
    this.state.apiKey = apiKey;
    this.state.language = language;
    try {
      this.api = new LingQAPI(apiKey);
      const isValid = await this.api.validateApiKey();
      if (isValid) {
        this.state.isInitialized = true;
        this.state.error = void 0;
        return true;
      } else {
        this.state.error = "Invalid API key";
        return false;
      }
    } catch (error) {
      this.state.error = error instanceof Error ? error.message : "Unknown error";
      return false;
    }
  }
  async sendToLingQ(text, title) {
    if (!this.api || !this.state.isInitialized) {
      throw new Error("Plugin not initialized");
    }
    const response = await this.api.createLesson(this.state.language, title || `Note from Obsidian - ${new Date().toLocaleString()}`, text);
    if (response.success) {
      this.state.lastSync = new Date();
      return true;
    }
    this.state.error = response.message || "Failed to send to LingQ";
    return false;
  }
  getState() {
    return { ...this.state };
  }
  getError() {
    return this.state.error;
  }
  clearError() {
    this.state.error = void 0;
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  apiKey: "",
  language: "en"
};
var LingQPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.stateManager = new PluginStateManager({
      apiKey: this.settings.apiKey,
      language: this.settings.language
    });
    if (this.settings.apiKey) {
      await this.initializePlugin();
    }
    this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor, view) => {
      const selection = editor.getSelection();
      if (selection) {
        menu.addItem((item) => {
          item.setTitle("Send to LingQ").setIcon("book").onClick(async () => {
            await this.sendToLingQ(selection);
          });
        });
      }
    }));
    this.addCommand({
      id: "send-to-lingq",
      name: "Send selection to LingQ",
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        if (selection) {
          await this.sendToLingQ(selection);
        } else {
          new import_obsidian.Notice("No text selected");
        }
      }
    });
    this.addSettingTab(new LingQSettingTab(this.app, this));
  }
  async initializePlugin() {
    const success = await this.stateManager.initialize(this.settings.apiKey, this.settings.language);
    if (!success) {
      const error = this.stateManager.getError();
      new import_obsidian.Notice(`Failed to initialize plugin: ${error}`);
    }
  }
  async sendToLingQ(text) {
    try {
      const success = await this.stateManager.sendToLingQ(text);
      if (success) {
        new import_obsidian.Notice("Successfully sent to LingQ");
      } else {
        const error = this.stateManager.getError();
        new import_obsidian.Notice(`Failed to send to LingQ: ${error}`);
      }
    } catch (error) {
      new import_obsidian.Notice(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    await this.initializePlugin();
  }
};
var LingQSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "LingQ Settings" });
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("Your LingQ API key").addText((text) => text.setPlaceholder("Enter your API key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Language").setDesc("Target language for learning").addDropdown((dropdown) => dropdown.addOption("en", "English").addOption("es", "Spanish").addOption("fr", "French").addOption("de", "German").addOption("ja", "Japanese").addOption("zh", "Chinese").setValue(this.plugin.settings.language).onChange(async (value) => {
      this.plugin.settings.language = value;
      await this.plugin.saveSettings();
    }));
  }
};
